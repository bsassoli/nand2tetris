// init
@256
D=A
@SP
M=D
// call Sys.init 0
@Main.Sys.init$return0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@THAT
D=M
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.Sys.init
0;JMP
(Main.Sys.init$return0)
// function Main.fibonacci 0
(Main.Main.fibonacci)
//C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=A
M=D
@SP
M=M+1
//C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
M=-1
@J_0
D;JLT
@SP
A=M-1
M=0
(J_0)
@SP
AM=M-1
D=M
@Main.$IF_TRUE
D;JNE
@Main.$IF_FALSE
0;JMP
(Main.$IF_TRUE)
//C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=A
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
D=D-A
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
(Main.$IF_FALSE)
//C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=A
M=D
@SP
M=M+1
//C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@Main.Main.fibonacci$return1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@THAT
D=M
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.Main.fibonacci
0;JMP
(Main.Main.fibonacci$return1)
//C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=A
M=D
@SP
M=M+1
//C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@Main.Main.fibonacci$return1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@THAT
D=M
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.Main.fibonacci
0;JMP
(Main.Main.fibonacci$return1)
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
D=D-A
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
